// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  userId        String       @unique
  name          String
  email         String       @unique
  profileImage  String
  premiumUser   Boolean      @default(false)
  channels      Channel[]    @relation("OwnerOf")
  subscriptions Channel[]    @relation("SubscriberOf")
  comments      Comment[]
  likes         Like[]
  dislikes      Dislike[]
  subscriber    Subscriber[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Channel {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  channelImg    String
  channelBanner String?
  name          String
  subscriberId  String       @db.ObjectId
  subscriber    Profile      @relation("SubscriberOf", fields: [subscriberId], references: [id])
  ownerId       String       @db.ObjectId
  owner         Profile      @relation("OwnerOf", fields: [ownerId], references: [id], onDelete: Cascade)
  videos        Video[]
  subscribers   Subscriber[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Subscriber {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  doerId    String  @db.ObjectId
  doer      Profile @relation(fields: [doerId], references: [id], onDelete: Cascade)
  channelId String  @db.ObjectId
  channel   Channel @relation(fields: [channelId], references: [id])
}

model Video {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  videoLink     String
  thumbnailLink String
  title         String
  description   String
  premiumVideo  Boolean   @default(false)
  keywords      String[]
  comments      Comment[]
  channelId     String    @db.ObjectId
  channel       Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  likes         Like[]
  dislike       Dislike[]
  views         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  commenterId String   @db.ObjectId
  commenter   Profile  @relation(fields: [commenterId], references: [id])
  videoId     String   @db.ObjectId
  video       Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  doerId    String   @db.ObjectId
  doer      Profile  @relation(fields: [doerId], references: [id], onDelete: Cascade)
  videoId   String   @db.ObjectId
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dislike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  doerId    String   @db.ObjectId
  doer      Profile  @relation(fields: [doerId], references: [id], onDelete: Cascade)
  videoId   String   @db.ObjectId
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
